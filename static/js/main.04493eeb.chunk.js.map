{"version":3,"sources":["config.tsx","controllers/common.tsx","controllers/myTransactions.tsx","../node_modules/@elrondnetwork/bls-wasm sync /^/.//.*/.js$","components/PageTitle/index.tsx","components/FormClaim/index.tsx","apiRequests/index.tsx","components/Transactions/txStatus.tsx","components/Transactions/StatusIcon.tsx","components/Transactions/TransactionsList.tsx","assets/img/heart.svg","components/Transactions/index.tsx","pages/Claim/index.tsx","components/FormFund/index.tsx","pages/Fund/index.tsx","pages/Home/index.tsx","components/FormTrade/index.tsx","pages/Trade/index.tsx","routes.ts","assets/img/elrond.svg","components/Layout/Footer/index.tsx","components/Layout/Navbar/index.tsx","components/Layout/index.tsx","pages/PageNotFound/index.tsx","App.tsx","index.tsx"],"names":["contractAddress","dAppName","providerAddress","environment","numDecimals","maxNum","hexEncodeStr","str","Buffer","from","toString","hexEncodeNumber","num","bnStr","BigNumber","length","hexDecodeNumber","capitalize","lower","toLowerCase","charAt","toUpperCase","slice","CustomNetworkProvider","address","a","this","doGetGeneric","token","addressSC","addressOwner","ownerAddress","ApiNetworkProvider","getProvider","timeout","myTransactions","pTransactions","sendTransactions","transactionServices","refreshAccount","transactions","redirectAfterSign","sessionId","myQueryNum","pAddress","pNetwork","pFunction","pArgs","query","Query","Address","func","ContractFunction","args","proxy","ProxyProvider","apiAddress","result","queryContract","then","returnData","encoded","decoded","decNumber","Promise","resolve","catch","err","console","error","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","module","exports","withPageTitle","title","Component","Memoized","memo","useEffect","document","FormClaim","useState","pair","claimData","setClaimData","identifier","name","itemsSelect","setItemsSelect","React","setTransactionSessionId","amountEgld","setAmountEgld","amountToken","setAmountToken","amountEarnEgld","setAmountEarnEgld","amountEarnToken","setAmountEarnToken","network","useGetNetworkConfig","ignore","updateTokens","myAdd","getTokens","tokens","i","sort","b","updateAmountToken","BytesValue","fromHex","amount","updateAmountEgld","updateEarningsToken","updateEarningsEgld","claimEarnings","transaction1","value","data","receiver","gasLimit","transaction2","claimPool","className","onSubmit","event","preventDefault","btn","activeElement","textContent","trim","htmlFor","onChange","target","placeholder","required","x","Denominate","split","icon","faArrowDown","fetchTransactions","url","axios","get","params","sender","condition","size","success","undefined","getTransactions","txStatus","pending","notExecuted","fail","StatusIcon","Icon","tx","incomingTransaction","status","faBan","faTimes","faArrowUp","sortByDate","timestamp","_desc","_g","fakeSender","TransactionList","filterFuncs","account","useGetAccountInfo","doubleOwnTransactions","filter","blockHash","sortedTransactions","el","includes","function","href","explorerAddress","txHash","Trim","text","moment","unix","format","decimals","Transactions","useGetActiveTransactionsStatus","hasActiveTransactions","transactionsFetched","state","setState","TransactionsList","PageState","faExchangeAlt","Claim","FormFund","fundData","setFundData","amountFundedEgld","setAmountFundedEgld","amountFundedToken","setAmountFundedToken","updateFundedToken","log","updateFundedEgld","handleSubmit","type","min","step","Fund","Home","to","routeNames","unlock","FormTrade","amountTransactionBuy","setAmountTransactionBuy","amountTransactionSell","setAmountTransactionSell","amountAvailableToken","setAmountAvailableToken","amountAvailableEgld","setAmountAvailableEgld","amountAvailablePoolToken","setAmountAvailablePoolToken","amountAvailablePoolEgld","setAmountAvailablePoolEgld","initialK","setInitialK","currentK","setCurrentK","referenceToken","setReferenceToken","tradeData","setTradeData","updatePairs","getPriceBuy","numerator","denominator","resultStr","bigIntDiv","getPriceSell","numeratorBig","denominatorBig","dividedBy","toFixed","updateAmount","pToken","pAmount","priceBuy","priceSell","queryFunc","answer","updateCurrentK","myCurrentK","updateInitialK","myInitialK","getAmountToken","myAmountToken","getAmountEgld","myAmountEgld","updateBalance","provider","getTokenData","balance","swapTokenForEgld","pValue","pGas","transaction","swapEgldForToken","maxLength","onClick","decAmount","intAmount","Trade","home","ledger","walletconnect","fund","claim","trade","mappedRoutes","path","component","authenticatedRoute","route","requiresAuth","Boolean","wrappedComponent","_excluded","_extends","assign","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgHeart","_ref","svgRef","titleId","props","width","height","viewBox","xmlns","xmlnsXlink","ref","stroke","strokeWidth","fillRule","d","ForwardRef","Footer","SvgElrond","fill","Navbar","current","isOwner","handleClick","option","innerText","window","location","origin","isLoggedIn","Nav","NavItem","disabled","logout","Layout","children","useLocation","pathname","search","menuOpt","setIsOwner","isOwnerSC","routes","unlockRoute","PageNotFound","faSearch","TransactionsToastList","DappUI","SignTransactionsModals","NotificationModal","UnlockPage","DappCorePages","mainroute","referrer","pop","App","customNetworkConfig","apiTimeout","element","loginRoute","index","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.04493eeb.chunk.js","sourcesContent":["export const contractAddress =\n  'erd1qqqqqqqqqqqqqpgq578zh88hskf9efwzyhkf64el7d6ve3lrsn2qwkvmt2';\n\nexport const dAppName = 'testDEX';\n\nexport const providerAddress = 'https://devnet-api.elrond.com';\n\nexport const environment = 'devnet';\n\nexport const numDecimals = 18;\n\nexport const maxNum = 10;\n","import BigNumber from 'bignumber.js';\n// idea from:\n// https://github.com/bogdan-rosianu/elrond-converters\nexport const hexEncodeStr = (str: string) =>\n  Buffer.from(str, 'ascii').toString('hex');\n\n// idea from:\n// https://github.com/bogdan-rosianu/elrond-converters\nexport const hexEncodeNumber = (num: number | string) => {\n  const bn = new BigNumber(num, 10);\n  let bnStr = bn.toString(16);\n\n  if (bnStr.length % 2 != 0) {\n    bnStr = '0' + bnStr;\n  }\n\n  return bnStr;\n};\n\n// idea from:\n// https://github.com/bogdan-rosianu/elrond-converters\nexport const hexDecodeNumber = (num: string) => {\n  const bn = new BigNumber(num, 16);\n  const bnDec = bn.toString(10);\n\n  return bnDec;\n};\n\nexport function capitalize(str: string) {\n  const lower = str.toLowerCase();\n  return str.charAt(0).toUpperCase() + lower.slice(1);\n}\n","import { refreshAccount, transactionServices } from '@elrondnetwork/dapp-core';\nimport {\n  Address,\n  ContractFunction,\n  ProxyProvider,\n  Query\n} from '@elrondnetwork/erdjs';\nimport { ApiNetworkProvider } from '@elrondnetwork/erdjs-network-providers';\nimport { providerAddress } from 'config';\nimport { hexDecodeNumber } from './common';\n\nexport class CustomNetworkProvider extends ApiNetworkProvider {\n  async getTokens(address: string) {\n    return await this.doGetGeneric(`accounts/${address}/tokens`);\n  }\n  async getTokenData(address: string, token: string) {\n    return await this.doGetGeneric(`accounts/${address}/tokens/${token}/`);\n  }\n  async isOwnerSC(addressSC: string, addressOwner: string) {\n    const { ownerAddress } = await this.doGetGeneric(`accounts/${addressSC}`);\n\n    return ownerAddress === addressOwner;\n  }\n}\n\nexport const getProvider = () => {\n  return new CustomNetworkProvider(providerAddress, {\n    timeout: 10000\n  });\n};\n\n// TODO: change any for an interface\nexport const myTransactions = async (pTransactions: any[]) => {\n  const { sendTransactions } = transactionServices;\n\n  await refreshAccount();\n\n  const { sessionId /*, error*/ } = await sendTransactions({\n    transactions: pTransactions,\n    redirectAfterSign: false\n  });\n\n  return sessionId;\n};\n\n// export const genericQuery = async (\n//   pAddress: string,\n//   pNetwork: any,\n//   pFunction: string,\n//   pToken: string,\n//   setter: any\n// ) => {\n//   const query = new Query({\n//     address: new Address(pAddress),\n//     func: new ContractFunction(pFunction),\n//     args: [BytesValue.fromHex(hexEncodeStr(pToken))]\n//   });\n//   const proxy = new ProxyProvider(pNetwork.apiAddress);\n//   proxy\n//     .queryContract(query)\n//     .then(({ returnData }) => {\n//       const [encoded] = returnData;\n//       const decoded = Buffer.from(encoded, 'base64').toString('hex');\n//       const decNumber = hexDecodeNumber(decoded);\n//       // console.log(decNumber);\n//       if (decNumber === '') {\n//         setter('0');\n//       } else {\n//         setter(decNumber);\n//       }\n//     })\n//     .catch((err) => {\n//       console.error('Unable to call VM query', err);\n//     });\n// };\n\n// query the smartcontract, only for methods returning an int value\nexport const myQueryNum = async (\n  pAddress: string,\n  pNetwork: any,\n  pFunction: string,\n  pArgs: any[]\n) => {\n  const query = new Query({\n    address: new Address(pAddress),\n    func: new ContractFunction(pFunction),\n    args: pArgs\n  });\n  const proxy = new ProxyProvider(pNetwork.apiAddress);\n  const result = proxy\n    .queryContract(query)\n    .then(({ returnData }) => {\n      const [encoded] = returnData;\n      const decoded = Buffer.from(encoded, 'base64').toString('hex');\n      const decNumber = hexDecodeNumber(decoded);\n\n      if (decNumber === '') {\n        return Promise.resolve('0');\n      } else {\n        return Promise.resolve(decNumber);\n      }\n    })\n    .catch((err) => {\n      console.error('Unable to call VM query', err);\n      return Promise.resolve('');\n    });\n  return result;\n};\n","var map = {\n\t\"./bls.js\": 274,\n\t\"./bls_c.js\": 433\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 754;","import React, { useEffect, memo } from 'react';\n\nconst withPageTitle = (title: string, Component: React.ComponentType) => () => {\n  const Memoized = memo(Component);\n\n  useEffect(() => {\n    document.title = title;\n  }, []);\n  return <Memoized />;\n};\n\nexport default withPageTitle;\n","import React from 'react';\nimport { useState } from 'react';\nimport { DappUI, useGetNetworkConfig } from '@elrondnetwork/dapp-core';\nimport { BytesValue } from '@elrondnetwork/erdjs';\nimport { faArrowDown } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { contractAddress } from 'config';\nimport { hexEncodeStr } from '../../controllers/common';\n\nimport {\n  getProvider,\n  myTransactions,\n  myQueryNum\n} from '../../controllers/myTransactions';\n\nconst FormClaim = () => {\n  const [claimData, setClaimData] = useState({\n    pair: ''\n  });\n  const [itemsSelect, setItemsSelect] = useState([\n    { identifier: '', name: 'select a pair' }\n  ]);\n  const /*transactionSessionId*/ [, setTransactionSessionId] = React.useState<\n      string | null\n    >(null);\n  const [amountEgld, setAmountEgld] = useState('');\n  const [amountToken, setAmountToken] = useState('');\n  const [amountEarnEgld, setAmountEarnEgld] = useState('');\n  const [amountEarnToken, setAmountEarnToken] = useState('');\n  const { network } = useGetNetworkConfig();\n\n  // run it only for a single time to load the amount available of the first pair\n  // variable 'ignore' is a trick to achieve that goal\n  React.useEffect(() => {\n    let ignore = false;\n\n    if (!ignore) {\n      // tokens inside the smart contract\n      updateTokens(contractAddress);\n      // updateAmountEgld(claimData.pair);\n      // updateAmountToken(claimData.pair);\n      // updateEarningsToken(claimData.pair);\n      // updateEarningsEgld();\n    }\n\n    return () => {\n      ignore = true;\n    };\n  }, []);\n\n  const updateTokens = (myAdd: string) => {\n    const provider = getProvider();\n    provider.getTokens(myAdd).then((tokens) => {\n      tokens.map((i: { name: string }) => {\n        i.name = i.name + '-xEGLD';\n      });\n      // idea for sorting:\n      // https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value\n      tokens = tokens.sort((a: any, b: any) =>\n        a.name > b.name ? 1 : b.name > a.name ? -1 : 0\n      );\n      setItemsSelect(tokens);\n    });\n  };\n\n  const updateAmountToken = async (pair: string) => {\n    const amount = await myQueryNum(\n      contractAddress,\n      network,\n      'getLiquidityToken',\n      [BytesValue.fromHex(hexEncodeStr(pair))]\n    );\n    setAmountToken(amount);\n  };\n\n  const updateAmountEgld = async (pair: string) => {\n    const amount = await myQueryNum(\n      contractAddress,\n      network,\n      'getLiquidityEgld',\n      [BytesValue.fromHex(hexEncodeStr(pair))]\n    );\n    setAmountEgld(amount);\n  };\n\n  const updateEarningsToken = async (pair: string) => {\n    const amount = await myQueryNum(contractAddress, network, 'getEarnings', [\n      BytesValue.fromHex(hexEncodeStr(pair))\n    ]);\n    setAmountEarnToken(amount);\n  };\n\n  const updateEarningsEgld = async () => {\n    const amount = await myQueryNum(contractAddress, network, 'getEarnings', [\n      BytesValue.fromHex(hexEncodeStr('EGLD'))\n    ]);\n    setAmountEarnEgld(amount);\n  };\n\n  const claimEarnings = async () => {\n    const pair = claimData.pair;\n    const transaction1 = {\n      value: '0',\n      data: 'claimEarnings' + '@' + hexEncodeStr(pair),\n      receiver: contractAddress,\n      gasLimit: 60000000\n    };\n    const transaction2 = {\n      value: '0',\n      data: 'claimEarnings' + '@' + hexEncodeStr('EGLD'),\n      receiver: contractAddress,\n      gasLimit: 60000000\n    };\n\n    const sessionId = await myTransactions([transaction1, transaction2]);\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n      updateEarningsToken('');\n      updateEarningsEgld();\n    } else {\n      // console.log('Error in claimEarnings sessionId = null');\n    }\n  };\n\n  const claimPool = async () => {\n    const pair = claimData.pair;\n\n    const transaction1 = {\n      value: '0',\n      data: 'claimLiquidityToken' + '@' + hexEncodeStr(pair),\n      receiver: contractAddress,\n      gasLimit: 60000000\n    };\n    const transaction2 = {\n      value: '0',\n      data: 'claimLiquidityEgld' + '@' + hexEncodeStr(pair),\n      receiver: contractAddress,\n      gasLimit: 60000000\n    };\n\n    const sessionId = await myTransactions([transaction1, transaction2]);\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n      updateAmountEgld(''); // setAmountEgld('0');\n      updateAmountToken(''); // setAmountToken('0');\n    } else {\n      // console.log('claimPool error sessionId = null');\n    }\n  };\n\n  // TODO: change \"any\"\n  const handleInputChange = (event: any) => {\n    setClaimData({\n      ...claimData,\n      [event.target.name]: event.target.value\n    });\n    const token = event.target.value.trim();\n\n    setAmountEgld('');\n    setAmountToken('');\n    setAmountEarnEgld('');\n    setAmountEarnToken('');\n\n    if (token !== '') {\n      // problem: now claimData.pair is the value before\n      // and event.target.value the new value\n      // when you submit the for values are OK, but not now\n      // so a solve it in a way I don't like...\n      updateAmountEgld(event.target.value);\n      updateAmountToken(event.target.value);\n      updateEarningsToken(event.target.value);\n      updateEarningsEgld();\n    }\n  };\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n    const btn = document.activeElement;\n\n    setAmountEgld('');\n    setAmountToken('');\n    setAmountEarnEgld('');\n    setAmountEarnToken('');\n\n    switch (btn?.textContent?.trim()) {\n      case 'Claim earnings': {\n        claimEarnings();\n        break;\n      }\n      case 'Claim pool': {\n        claimPool();\n        break;\n      }\n      default: {\n        // console.log('something went wrong');\n        break;\n      }\n    }\n  };\n\n  return (\n    <>\n      <h4 className='mb-3 font-weight-normal text-light'>\n        Claim earnings and liquidity pools\n      </h4>\n      <form className='' onSubmit={handleSubmit}>\n        <div className='form-group row'>\n          <label htmlFor='pair' className='text-light'>\n            Select pair:\n          </label>\n          <select\n            className='form-control'\n            id='pair'\n            name='pair'\n            onChange={handleInputChange}\n            placeholder='select a pair'\n            required\n          >\n            <option key='' value=''>\n              select a pair\n            </option>\n            {itemsSelect.map((x) => (\n              <option key={x.identifier} value={x.identifier}>\n                {x.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className='form-group row mt-0 mb-0'>\n          <label htmlFor='amountPair' className='text-info'>\n            Pool available:{' '}\n            <DappUI.Denominate value={amountEgld} token='xEGLD' /> -{' '}\n            <DappUI.Denominate\n              value={amountToken}\n              token={claimData.pair.split('-')[0]}\n            />\n          </label>\n        </div>\n        <div className='form-group row mt-0 mb-0'>\n          <label htmlFor='amountEarnings' className='text-info'>\n            Earnings available:{' '}\n            <DappUI.Denominate value={amountEarnEgld} token='xEGLD' /> -{' '}\n            <DappUI.Denominate\n              value={amountEarnToken}\n              token={claimData.pair.split('-')[0]}\n            />\n          </label>\n        </div>\n        <div className='d-flex mt-4 justify-content-center'>\n          <button\n            name='bEarnings'\n            value='bEarnings'\n            className='btn bg-white m-2'\n          >\n            <FontAwesomeIcon icon={faArrowDown} className='text-primary' />{' '}\n            Claim earnings\n          </button>\n          <button name='bPool' value='bPool' className='btn bg-white m-2'>\n            <FontAwesomeIcon icon={faArrowDown} className='text-primary' />{' '}\n            Claim pool\n          </button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default FormClaim;\n","import axios from 'axios';\n\ninterface GetLatestTransactionsType {\n  apiAddress: string;\n  address: string;\n  contractAddress: string;\n  timeout: number;\n  page?: number;\n  url?: string;\n}\n\nconst fetchTransactions = (url: string) =>\n  async function getTransactions({\n    apiAddress,\n    address,\n    contractAddress,\n    timeout\n  }: GetLatestTransactionsType) {\n    try {\n      const { data } = await axios.get(`${apiAddress}${url}`, {\n        params: {\n          sender: address,\n          receiver: contractAddress,\n          condition: 'must',\n          size: 25\n        },\n        timeout\n      });\n\n      return {\n        data: data,\n        success: data !== undefined\n      };\n    } catch (err) {\n      return {\n        success: false\n      };\n    }\n  };\n\nexport const getTransactions = fetchTransactions('/transactions');\nexport const getTransactionsCount = fetchTransactions('/transactions/count');\n","const txStatus = {\n  pending: 'pending', // I change 'Pending' for 'pending'\n  notExecuted: 'not executed', // I change 'Not Executed' for 'not executed'\n  success: 'success', // I change 'Success' for 'success'\n  fail: 'fail' // I change 'Failed' for 'fail'\n};\n\nexport default txStatus;\n","import React from 'react';\nimport {\n  faArrowUp,\n  faArrowDown,\n  faBan,\n  faTimes\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport txStatus from './txStatus';\nimport { TransactionType } from './types';\n\ninterface StatusIconType {\n  tx: TransactionType;\n  incomingTransaction: boolean;\n}\n\nconst StatusIcon = ({ tx, incomingTransaction }: StatusIconType) => {\n  let Icon;\n\n  switch (tx.status) {\n    case txStatus.notExecuted:\n      Icon = () => <FontAwesomeIcon icon={faBan} className='text-danger' />;\n      break;\n    case txStatus.fail:\n      Icon = () => <FontAwesomeIcon icon={faTimes} className='text-danger' />;\n      break;\n    case txStatus.success:\n      Icon = () => (\n        <FontAwesomeIcon\n          icon={incomingTransaction ? faArrowUp : faArrowDown}\n          className='text-primary'\n        />\n      );\n      break;\n    default:\n      Icon = () => (\n        <FontAwesomeIcon\n          icon={incomingTransaction ? faArrowUp : faArrowDown}\n          className='text-secondary'\n        />\n      );\n  }\n  return (\n    <i className='m-3 circle'>\n      <Icon />\n    </i>\n  );\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport {\n  useGetAccountInfo,\n  DappUI,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport moment from 'moment';\nimport StatusIcon from './StatusIcon';\nimport txStatus from './txStatus';\nimport { TransactionType } from './types';\n\nfunction sortByDate(a: TransactionType, b: TransactionType) {\n  if (a.timestamp < b.timestamp) {\n    return 1;\n  }\n  if (a.timestamp > b.timestamp) {\n    return -1;\n  }\n  return 0;\n}\n\nconst fakeSender =\n  'erd000000000000000000000000000000000000000000000000000000000a';\n\nconst TransactionList = ({\n  transactions,\n  title,\n  filterFuncs\n}: {\n  transactions: TransactionType[];\n  title: string;\n  filterFuncs: string[];\n}) => {\n  const { network } = useGetNetworkConfig();\n  const account = useGetAccountInfo();\n\n  const incoming = (sender: string) =>\n    sender === account.address && sender !== fakeSender;\n\n  // eslint-disable-next-line\n  const doubleOwnTransactions = transactions\n    .filter((tx) => tx.sender === tx.receiver && tx.blockHash)\n    .map((tx) => ({ ...tx, sender: fakeSender, timestamp: tx.timestamp + 1 }));\n\n  const sortedTransactions: TransactionType[] = (\n    [\n      ...transactions,\n      ...(doubleOwnTransactions.length > 0 ? doubleOwnTransactions : [])\n    ].filter(\n      (el: any) => el !== undefined && filterFuncs.includes(el.function)\n    ) as any\n  ).sort(sortByDate);\n\n  return (\n    <div className='p-3 mt-3'>\n      <h5 className='mb-3 font-weight-normal text-center'>{title}</h5>\n      <div className='table-responsive'>\n        <table className='transactions table pb-3'>\n          <thead>\n            <tr className='bg-light'>\n              <th className='border-0 font-weight-normal'></th>\n              <th className='border-0 font-weight-normal'>Tx hash</th>\n              <th className='border-0 font-weight-normal'>Date</th>\n              <th className='border-0 font-weight-normal'>Amount</th>\n            </tr>\n          </thead>\n          <tbody data-testid='transactionsList'>\n            {sortedTransactions.map((tx: TransactionType, i) => {\n              const incomingTransaction = incoming(tx.sender);\n\n              return (\n                <tr key={tx.txHash + i}>\n                  <td>\n                    <div\n                      className='transaction-icon bg-light d-flex align-items-center justify-content-center'\n                      title={txStatus[tx.status]}\n                    >\n                      <StatusIcon\n                        tx={tx}\n                        incomingTransaction={incomingTransaction}\n                      />\n                    </div>\n                  </td>\n                  <td className='transaction-hash'>\n                    <a\n                      href={`${network.explorerAddress}/transactions/${tx.txHash}`}\n                      {...{\n                        target: '_blank'\n                      }}\n                      title='View in Explorer'\n                    >\n                      <DappUI.Trim data-testid='txHash' text={tx.txHash} />\n                    </a>\n                  </td>\n                  <td>\n                    {moment.unix(tx.timestamp).format('MMM Do YYYY, h:mm A')}\n                  </td>\n                  <td className='text-right'>\n                    {tx.value === '0' ? (\n                      ''\n                    ) : (\n                      <>{tx.sender === account.address ? '-' : '+'}</>\n                    )}\n                    <DappUI.Denominate value={tx.value} decimals={2} />\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      <div className='d-flex justify-content-center'>\n        <a\n          href={`${network.explorerAddress}/address/${account.address}`}\n          {...{\n            target: '_blank'\n          }}\n        >\n          See all transactions\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionList;\n","var _desc, _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgHeart(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"14px\",\n    height: \"12px\",\n    viewBox: \"0 0 14 12\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"heart\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"heart\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.00249318,12 L1.23954171,6.67000631 C0.219967339,5.73025806 -0.214165447,4.32384166 0.101003225,2.98159749 C0.416171897,1.63935333 1.4326464,0.565685745 2.76676674,0.165841807 C4.10088708,-0.234002131 5.54948604,0.100868016 6.56580179,1.04405825 L7.00249318,1.44795492 L7.43918869,1.04405825 C9.01100287,-0.409657356 11.4775242,-0.328715349 12.9483183,1.22484728 C14.4191125,2.77840991 14.3372196,5.21629062 12.7654055,6.67000631 L7.00249318,12 Z\",\n    id: \"Path\",\n    fillRule: \"nonzero\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgHeart);\nexport default __webpack_public_path__ + \"static/media/heart.8edd3f99.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport {\n  useGetAccountInfo,\n  DappUI,\n  transactionServices,\n  refreshAccount,\n  useGetNetworkConfig\n} from '@elrondnetwork/dapp-core';\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\nimport { getTransactions } from 'apiRequests';\nimport { contractAddress } from 'config';\nimport TransactionsList from './TransactionsList';\nimport { StateType } from './types';\n\nconst Transactions = ({\n  title,\n  filterFuncs\n}: {\n  title: string;\n  filterFuncs: string[];\n}) => {\n  const {\n    network: { apiAddress }\n  } = useGetNetworkConfig();\n  const { success, fail, hasActiveTransactions } =\n    transactionServices.useGetActiveTransactionsStatus();\n\n  const [state, setState] = React.useState<StateType>({\n    transactions: [],\n    transactionsFetched: undefined\n  });\n  // const [title, setTitle] = React.useState('');\n  // setTitle('Hello world');\n  const account = useGetAccountInfo();\n\n  const fetchData = () => {\n    if (success || fail || !hasActiveTransactions) {\n      getTransactions({\n        apiAddress,\n        address: account.address,\n        timeout: 3000,\n        contractAddress\n      }).then(({ data, success: transactionsFetched }) => {\n        refreshAccount();\n        setState({\n          transactions: data,\n          transactionsFetched\n        });\n      });\n    }\n  };\n\n  React.useEffect(fetchData, [success, fail, hasActiveTransactions]);\n\n  const { transactions } = state;\n\n  return transactions.length > 0 ? (\n    <TransactionsList\n      transactions={transactions}\n      title={title}\n      filterFuncs={filterFuncs}\n    />\n  ) : (\n    <div className='my-5'>\n      <DappUI.PageState\n        icon={faExchangeAlt}\n        className='text-muted fa-3x'\n        title='No Transactions'\n      />\n    </div>\n  );\n};\n\nexport default Transactions;\n","import * as React from 'react';\n\nimport FormClaim from '../../components/FormClaim';\nimport Transactions from '../../components/Transactions';\nconst filterFuncs = ['claimLiquidityToken', 'claimLiquidityEgld'];\n\nconst Claim = () => {\n  return (\n    <div className='container py-4'>\n      <div className='row'>\n        <div className='col-12 col-md-10 mx-auto'>\n          <div className='card shadow-sm rounded border-0'>\n            <div className='card-body p-1'>\n              <div className='card rounded border-0 bg-primary'>\n                <div className='card-body text-center p-4'>\n                  <FormClaim />\n                </div>\n              </div>\n              <Transactions\n                title='Transaction related to claiming funds and your account'\n                filterFuncs={filterFuncs}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Claim;\n","import React from 'react';\nimport { useState } from 'react';\nimport {\n  DappUI,\n  useGetNetworkConfig,\n  useGetAccountInfo\n} from '@elrondnetwork/dapp-core';\nimport { BytesValue } from '@elrondnetwork/erdjs';\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport BigNumber from 'bignumber.js';\nimport { contractAddress, numDecimals } from 'config';\nimport { hexEncodeStr, hexEncodeNumber } from '../../controllers/common';\nimport {\n  getProvider,\n  myTransactions,\n  myQueryNum\n} from '../../controllers/myTransactions';\nconst FormFund = () => {\n  const [fundData, setFundData] = useState({\n    token: '',\n    amountToken: 0,\n    amountEgld: 0\n  });\n  const [itemsSelect, setItemsSelect] = useState([\n    { identifier: '', name: 'select a token' }\n  ]);\n\n  const [amountFundedEgld, setAmountFundedEgld] = useState('');\n  const [amountFundedToken, setAmountFundedToken] = useState('');\n  const { network } = useGetNetworkConfig();\n  const account = useGetAccountInfo();\n  const { address } = account;\n  const /*transactionSessionId*/ [, setTransactionSessionId] = React.useState<\n      string | null\n    >(null);\n\n  // run it only for a single time to load the amount available of the first pair\n  // variable 'ignore' is a trick to achieve that goal\n  React.useEffect(() => {\n    let ignore = false;\n\n    if (!ignore) {\n      // tokens inside the user's wallet\n      updateTokens(address);\n    }\n\n    return () => {\n      ignore = true;\n    };\n  }, []);\n\n  // TODO: change \"any\"\n  const handleInputChange = (event: any) => {\n    setFundData({\n      ...fundData,\n      [event.target.name]: event.target.value\n    });\n    const token = event.target.value.trim();\n\n    if (token !== '') {\n      // problem: now claimData.pair is the value before\n      // and event.target.value the new value\n      // when you submit the for values are OK, but not now\n      // so a solve it in a way I don't like...\n      updateFundedEgld(event.target.value);\n      updateFundedToken(event.target.value);\n      // updateTokens(address);\n    } else {\n      setAmountFundedEgld('');\n      setAmountFundedToken('');\n    }\n  };\n\n  const handleInputChangeToken = (event: any) => {\n    setFundData({\n      ...fundData,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const handleInputChangeEgld = (event: any) => {\n    setFundData({\n      ...fundData,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const updateFundedToken = async (token: string) => {\n    console.log('updateFundedToken', token);\n    const amount = await myQueryNum(\n      contractAddress,\n      network,\n      'getLiquidityToken',\n      [BytesValue.fromHex(hexEncodeStr(token))]\n    );\n    setAmountFundedToken(amount);\n  };\n\n  const updateFundedEgld = async (token: string) => {\n    console.log('updateFundedEgld', token);\n    const amount = await myQueryNum(\n      contractAddress,\n      network,\n      'getLiquidityEgld',\n      [BytesValue.fromHex(hexEncodeStr(token))]\n    );\n    setAmountFundedEgld(amount);\n  };\n\n  const updateTokens = (myAdd: string) => {\n    const provider = getProvider();\n    provider.getTokens(myAdd).then((tokens) => {\n      setItemsSelect(tokens);\n    });\n  };\n\n  const handleSubmit = async (event: any) => {\n    event.preventDefault();\n\n    // const { sendTransactions } = transactionServices;\n\n    const token = fundData.token;\n    const amountToken = new BigNumber(\n      `${fundData.amountToken}e+${numDecimals}`,\n      10\n    );\n    const amountEgld = new BigNumber(\n      `${fundData.amountEgld}e+${numDecimals}`,\n      10\n    );\n\n    const data =\n      'ESDTTransfer' +\n      '@' +\n      hexEncodeStr(token) + // token identifier in hexadecimal encoding, UOC-d139bb\n      '@' + // value to transfer in hexadecimal encoding, 52b7d2dcc80cd2e4000000=100000000000000000000000000\n      hexEncodeNumber(amountToken.toString()) +\n      '@' +\n      hexEncodeStr('addLiquidityToken'); // name of method to call in hexadecimal encoding\n\n    const transaction1 = {\n      value: 0,\n      data,\n      receiver: contractAddress,\n      gasLimit: 60000000\n    };\n\n    const transaction2 = {\n      value: amountEgld.toString(),\n      data: 'addLiquidityEgld' + '@' + hexEncodeStr(token),\n      receiver: contractAddress,\n      gasLimit: 60000000\n    };\n\n    const sessionId = await myTransactions([transaction1, transaction2]);\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    }\n  };\n\n  return (\n    <>\n      <h4 className='mb-3 font-weight-normal text-light'>\n        Fund liquidity pools\n      </h4>\n      <form className='' onSubmit={handleSubmit}>\n        <div className='form-group row'>\n          <label htmlFor='token' className='text-light'>\n            Select token:\n          </label>\n          <select\n            className='form-control'\n            id='token'\n            name='token'\n            placeholder='select a token'\n            onChange={handleInputChange}\n            value={fundData.token}\n            required\n          >\n            <option key='' value=''>\n              select a token\n            </option>\n            {itemsSelect.map((x) => (\n              <option key={x.identifier} value={x.identifier}>\n                {x.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className='form-group row'>\n          <label htmlFor='amountToken' className='text-light'>\n            Amount token:\n          </label>\n          <input\n            className='form-control'\n            type='number'\n            min='0'\n            step='0.0001'\n            id='amountToken'\n            name='amountToken'\n            onChange={handleInputChangeToken}\n            required\n          />\n          <label htmlFor='amountToken' className='text-info'>\n            Already funded:{' '}\n            <DappUI.Denominate\n              value={amountFundedToken}\n              token={fundData.token.split('-')[0]}\n            />\n          </label>\n        </div>\n        <div className='form-group row'>\n          <label htmlFor='amountEgld' className='text-light'>\n            Amount EGLD:\n          </label>\n          <input\n            className='form-control'\n            type='number'\n            min='0'\n            step='0.0001'\n            id='amountEgld'\n            name='amountEgld'\n            onChange={handleInputChangeEgld}\n            required\n          />\n          <label htmlFor='amountEgld' className='text-info'>\n            Already funded:{' '}\n            <DappUI.Denominate value={amountFundedEgld} token='xEGLD' />\n          </label>\n        </div>\n        <div className='d-flex mt-4 justify-content-center'>\n          <button className='btn bg-white m-2'>\n            <FontAwesomeIcon icon={faArrowUp} className='text-primary' /> Fund\n          </button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default FormFund;\n","import * as React from 'react';\nimport FormFund from '../../components/FormFund';\nimport Transactions from '../../components/Transactions';\nconst filterFuncs = ['addLiquidityToken', 'addLiquidityEgld'];\nconst Fund = () => {\n  return (\n    <div className='container py-4'>\n      <div className='row'>\n        <div className='col-12 col-md-10 mx-auto'>\n          <div className='card shadow-sm rounded border-0'>\n            <div className='card-body p-1'>\n              <div className='card rounded border-0 bg-primary'>\n                <div className='card-body text-center p-4'>\n                  <FormFund />\n                </div>\n              </div>\n              <Transactions\n                title='Transactions related to funding liquidity pools and you account'\n                filterFuncs={filterFuncs}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Fund;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { dAppName } from 'config';\nimport { routeNames } from 'routes';\n\nconst Home = () => {\n  return (\n    <div className='d-flex flex-fill align-items-center container'>\n      <div className='row w-100'>\n        <div className='col-12 col-md-8 col-lg-5 mx-auto'>\n          <div className='card shadow-sm rounded p-4 border-0'>\n            <div className='card-body text-center'>\n              <h2 className='mb-3' data-testid='title'>\n                {dAppName}\n              </h2>\n\n              <p className='mb-3'>\n                This is a very simple DEX based on AMM protocol.\n                <br /> Login using your Elrond wallet.\n              </p>\n\n              <Link\n                to={routeNames.unlock}\n                className='btn btn-primary mt-3 text-white'\n                data-testid='loginBtn'\n              >\n                Login\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { useState } from 'react';\nimport {\n  DappUI,\n  useGetNetworkConfig,\n  useGetAccountInfo\n} from '@elrondnetwork/dapp-core';\nimport { BytesValue } from '@elrondnetwork/erdjs';\nimport { faArrowDown, faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport BigNumber from 'bignumber.js';\nimport { contractAddress, maxNum, numDecimals } from 'config';\nimport { hexEncodeNumber, hexEncodeStr } from '../../controllers/common';\nimport {\n  getProvider,\n  myQueryNum,\n  myTransactions\n} from '../../controllers/myTransactions';\n\nconst FormTrade = () => {\n  const [amountTransactionBuy, setAmountTransactionBuy] = useState('');\n  const [amountTransactionSell, setAmountTransactionSell] = useState('');\n  const [amountAvailableToken, setAmountAvailableToken] = useState('');\n  const [amountAvailableEgld, setAmountAvailableEgld] = useState('');\n  const [amountAvailablePoolToken, setAmountAvailablePoolToken] = useState('');\n  const [amountAvailablePoolEgld, setAmountAvailablePoolEgld] = useState('');\n  const [initialK, setInitialK] = useState('0');\n  const [currentK, setCurrentK] = useState('0');\n  const [referenceToken, setReferenceToken] = useState('');\n  // const [disabledBuy, setDisabledBuy] = useState(false);\n  // const [disabledSell, setDisabledSell] = useState(false);\n  const [itemsSelect, setItemsSelect] = useState([\n    { identifier: '', name: 'select a pair', value: '' }\n  ]);\n  const [tradeData, setTradeData] = useState({\n    pair: '',\n    amount: 0\n  });\n  const { network } = useGetNetworkConfig();\n  const { address, account } = useGetAccountInfo();\n  const /*transactionSessionId*/ [, setTransactionSessionId] = React.useState<\n      string | null\n    >(null);\n\n  // run it only for a single time to load the amount available of the first pair\n  // variable 'ignore' is a trick to achieve that goal\n  React.useEffect(() => {\n    let ignore = false;\n\n    if (!ignore) {\n      // tokens inside the smart contract\n      updatePairs(contractAddress);\n      // updatePrice(tradeData.pair);\n      // updateAmountToken(claimData.pair);\n      // updateEarningsToken(claimData.pair);\n      // updateEarningsEgld(claimData.pair);\n    }\n\n    return () => {\n      ignore = true;\n    };\n  }, []);\n\n  const getPriceBuy = async (token: string, amount: number | string) => {\n    const numerator = await myQueryNum(\n      contractAddress,\n      network,\n      'priceEgldTokenNumerator',\n      [\n        BytesValue.fromHex(hexEncodeStr(token)),\n        BytesValue.fromHex(hexEncodeNumber(amount))\n      ]\n    );\n\n    const denominator = await myQueryNum(\n      contractAddress,\n      network,\n      'priceEgldTokenDenominator',\n      [\n        BytesValue.fromHex(hexEncodeStr(token)),\n        BytesValue.fromHex(hexEncodeNumber(amount))\n      ]\n    );\n    const resultStr = bigIntDiv(numerator, denominator);\n    return resultStr;\n  };\n\n  const getPriceSell = async (token: string, amount: number | string) => {\n    const numerator = await myQueryNum(\n      contractAddress,\n      network,\n      'priceTokenEgldNumerator',\n      [\n        BytesValue.fromHex(hexEncodeStr(token)),\n        BytesValue.fromHex(hexEncodeNumber(amount))\n      ]\n    );\n\n    const denominator = await myQueryNum(\n      contractAddress,\n      network,\n      'priceTokenEgldDenominator',\n      [\n        BytesValue.fromHex(hexEncodeStr(token)),\n        BytesValue.fromHex(hexEncodeNumber(amount))\n      ]\n    );\n\n    const resultStr = bigIntDiv(numerator, denominator);\n    return resultStr;\n  };\n\n  const bigIntDiv = (numerator: string, denominator: string) => {\n    const numeratorBig = new BigNumber(numerator, 10);\n    const denominatorBig = new BigNumber(denominator, 10);\n    const result = numeratorBig.dividedBy(denominatorBig).toFixed(0);\n    return result.toString();\n  };\n\n  const updateAmount = async (pToken: string, pAmount: number) => {\n    const num = new BigNumber(`${pAmount}e+${numDecimals}`, 10);\n    const amount = num.toString();\n\n    const priceBuy = await getPriceBuy(pToken, amount);\n    setAmountTransactionBuy(priceBuy);\n    const priceSell = await getPriceSell(pToken, amount);\n    setAmountTransactionSell(priceSell);\n  };\n\n  const queryFunc = async (token: string, func: string) => {\n    const answer = await myQueryNum(contractAddress, network, func, [\n      BytesValue.fromHex(hexEncodeStr(token))\n    ]);\n    return answer;\n  };\n\n  const updateCurrentK = async (token: string) => {\n    const myCurrentK = await queryFunc(token, 'calculateK');\n    setCurrentK(myCurrentK);\n  };\n\n  const updateInitialK = async (token: string) => {\n    const myInitialK = await queryFunc(token, 'getInitialK');\n    setInitialK(myInitialK);\n  };\n\n  const getAmountToken = async (token: string) => {\n    const myAmountToken = await queryFunc(token, 'getLiquidityToken');\n    return myAmountToken;\n  };\n\n  const getAmountEgld = async (token: string) => {\n    const myAmountEgld = await queryFunc(token, 'getLiquidityEgld');\n    return myAmountEgld;\n  };\n\n  const updatePairs = (myAdd: string) => {\n    const provider = getProvider();\n    provider.getTokens(myAdd).then((tokens) => {\n      tokens.map((i: { name: string }) => {\n        i.name = i.name + '-xEGLD';\n      });\n      // idea for sorting:\n      // https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value\n      tokens = tokens.sort((a: any, b: any) =>\n        a.name > b.name ? 1 : b.name > a.name ? -1 : 0\n      );\n      setItemsSelect(tokens);\n    });\n  };\n\n  const updateBalance = async (pToken: string) => {\n    const provider = getProvider();\n    setAmountAvailableToken('');\n    setAmountAvailableEgld('');\n    setAmountAvailablePoolToken('');\n    setAmountAvailablePoolEgld('');\n\n    // label \"Your wallet (amount available)\"\"\n    provider.getTokenData(address, pToken).then(({ balance }) => {\n      //setItemsSelect(tokens);\n      setAmountAvailableToken(balance);\n      setAmountAvailableEgld(account.balance);\n    });\n\n    // label \"Pool (amount available)\"\n    const amountEgld = await getAmountEgld(pToken);\n    const amountToken = await getAmountToken(pToken);\n    setAmountAvailablePoolEgld(amountEgld);\n    setAmountAvailablePoolToken(amountToken);\n  };\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n  };\n\n  const handleSubmitBuy = () => {\n    const token = tradeData.pair;\n    const decAmount = tradeData.amount;\n\n    const num = new BigNumber(`${decAmount}e+${numDecimals}`, 10);\n    const intAmount = num.toString();\n\n    swapEgldForToken(intAmount, token, contractAddress, 60000000);\n  };\n\n  const handleSubmitSell = () => {\n    const token = tradeData.pair;\n    const decAmount = tradeData.amount;\n\n    const num = new BigNumber(`${decAmount}e+${numDecimals}`, 10);\n    const intAmount = num.toString();\n\n    swapTokenForEgld(intAmount, token, contractAddress, 60000000);\n  };\n\n  const swapTokenForEgld = async (\n    pValue: string,\n    pToken: string,\n    pAddress: string,\n    pGas: number\n  ) => {\n    const transaction = {\n      value: '0',\n      data:\n        'ESDTTransfer' +\n        '@' + // token identifier in hexadecimal encoding\n        hexEncodeStr(pToken) +\n        '@' + // value to transfer in hexadecimal encoding\n        hexEncodeNumber(pValue) +\n        '@' + // name of method to call in hexadecimal encoding\n        hexEncodeStr('swapTokenForEgld'),\n      receiver: pAddress,\n      gasLimit: pGas\n    };\n\n    const sessionId = await myTransactions([transaction]);\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    } else {\n      // console.log('swapEgldForToken error sessionId = null');\n    }\n  };\n\n  const swapEgldForToken = async (\n    pValue: string,\n    pToken: string,\n    pAddress: string,\n    pGas: number\n  ) => {\n    const transaction = {\n      value: pValue,\n      data: 'swapEgldForToken' + '@' + hexEncodeStr(pToken),\n      receiver: pAddress,\n      gasLimit: pGas\n    };\n    const sessionId = await myTransactions([transaction]);\n\n    if (sessionId != null) {\n      setTransactionSessionId(sessionId);\n    } else {\n      // console.log('swapTokenForEgld error sessionId = null');\n    }\n  };\n\n  // TODO: change \"any\"\n  const handleInputChangeSelect = (event: any) => {\n    setTradeData({\n      ...tradeData,\n      [event.target.name]: event.target.value\n    });\n    const amount = tradeData.amount;\n    const token = event.target.value.trim();\n\n    setAmountTransactionBuy('');\n    setAmountTransactionSell('');\n\n    if (token !== '') {\n      // label \"Current K\"\n      updateCurrentK(token);\n      // label \"Initial K\"\n      updateInitialK(token);\n\n      // labels:\n      // - \"Your wallet (amount available)\"\"\n      // - \"Pool (amount available)\"\n      updateBalance(token);\n\n      // labels:\n      // - \"Buy\"\n      // - \"Sell\"\n      updateAmount(token, amount);\n      setReferenceToken('xEGLD');\n      // disableButtons();\n    } else {\n      setAmountTransactionBuy('');\n      setAmountTransactionSell('');\n      setAmountAvailableToken('');\n      setAmountAvailableEgld('');\n      setAmountAvailablePoolToken('');\n      setAmountAvailablePoolEgld('');\n      setInitialK('0');\n      setCurrentK('0');\n      setReferenceToken('');\n      // setDisabledBuy(false);\n      // setDisabledBuy(true);\n    }\n  };\n\n  const handleInputChange = (event: any) => {\n    setTradeData({\n      ...tradeData,\n      [event.target.name]: event.target.value\n    });\n\n    const token = tradeData.pair;\n    const amount = event.target.value;\n    setAmountTransactionBuy('');\n    setAmountTransactionSell('');\n    if (token.trim() !== '') updateAmount(token, amount);\n\n    // disableButtons();\n  };\n\n  // const disableButtons = () => {\n  //   const numBuy = new BigNumber(amountTransactionBuy, 10);\n  //   const numSell = new BigNumber(amountTransactionSell, 10);\n  //   const poolEgld = new BigNumber(amountAvailablePoolEgld, 10);\n  //   const poolToken = new BigNumber(amountAvailablePoolToken, 10);\n  //   if (numBuy.gte(poolToken)) {\n  //     setDisabledBuy(true);\n  //   }\n  //   if (numSell.gte(poolEgld)) {\n  //     setDisabledSell(true);\n  //   }\n  // };\n\n  return (\n    <>\n      <h4 className='mb-3 font-weight-normal text-light'>Swap tokens</h4>\n      <form className='' onSubmit={handleSubmit}>\n        <div className='form-group row'>\n          <label htmlFor='token' className='text-light'>\n            Select pair:\n          </label>\n          <select\n            className='form-control'\n            id='pair'\n            name='pair'\n            onChange={handleInputChangeSelect}\n            placeholder='select a pair'\n            required\n          >\n            <option key='' value=''>\n              select a pair\n            </option>\n            {itemsSelect.map((x) => (\n              <option key={x.identifier} value={x.identifier}>\n                {x.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className='form-group row mb-0'>\n          <label htmlFor='amount' className='text-light'>\n            Amount:\n          </label>\n          <input\n            className='form-control'\n            type='number'\n            name='amount'\n            min='0'\n            maxLength={maxNum}\n            step='0.0001'\n            onChange={handleInputChange}\n            required\n          />\n          <div className='container text-left m-0 mt-2 p-0'>\n            <div className='form-group row mt-0 mb-0'>\n              <div className='col-md-12'>\n                <p className='text-info m-0'>\n                  <strong>Buy: </strong>\n                  Paying {tradeData.amount}{' '}\n                  <span className='text-secondary'>{referenceToken}</span>{' '}\n                  you&apos;ll get{' '}\n                  <DappUI.Denominate\n                    value={amountTransactionBuy}\n                    token={tradeData.pair.split('-')[0]}\n                  />\n                </p>\n                <p className='text-info m-0'>\n                  <strong>Sell: </strong>\n                  Paying {tradeData.amount}{' '}\n                  <span className='text-secondary'>\n                    {tradeData.pair.split('-')[0]}\n                  </span>{' '}\n                  you&apos;ll get{' '}\n                  <DappUI.Denominate\n                    value={amountTransactionSell}\n                    token='xEGLD'\n                  />\n                </p>\n                <p className='text-info m-0'>\n                  <strong>Pool (amount available): </strong>\n                </p>\n                <p className='text-info m-0'>\n                  <DappUI.Denominate\n                    value={amountAvailablePoolToken}\n                    token={tradeData.pair.split('-')[0]}\n                  />\n                </p>\n                <p className='text-info m-0'>\n                  <DappUI.Denominate\n                    value={amountAvailablePoolEgld}\n                    token='xEGLD'\n                  />\n                </p>\n                <p className='text-info m-0'>\n                  <strong>Your wallet (amount available):</strong>\n                </p>\n                <p className='text-info m-0'>\n                  <DappUI.Denominate\n                    value={amountAvailableToken}\n                    token={tradeData.pair.split('-')[0]}\n                  />\n                </p>\n                <p className='text-info m-0'>\n                  <DappUI.Denominate\n                    value={amountAvailableEgld}\n                    token='xEGLD'\n                  />\n                </p>\n              </div>\n            </div>\n            <div className='form-group row mt-0 mb-0 text-right'>\n              <div className='col-md-12'>\n                <p className='text-info m-0'>\n                  <small>\n                    <strong>Initial K:</strong> {`${initialK}`}\n                  </small>\n                </p>\n                <p className='text-info m-0'>\n                  <small>\n                    <strong>Current K:</strong> {`${currentK}`}\n                  </small>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className='d-flex m-0 p-0 justify-content-center'>\n          <button className='btn bg-white m-2' onClick={handleSubmitBuy}>\n            <FontAwesomeIcon icon={faArrowDown} className='text-primary' /> Buy{' '}\n            {tradeData.pair.split('-')[0]} paying {referenceToken}\n          </button>\n          <button className='btn bg-white m-2' onClick={handleSubmitSell}>\n            <FontAwesomeIcon icon={faArrowUp} className='text-primary' /> Sell{' '}\n            {tradeData.pair.split('-')[0]} getting {referenceToken}\n          </button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default FormTrade;\n","import * as React from 'react';\nimport FormTrade from '../../components/FormTrade';\nimport Transactions from '../../components/Transactions';\nconst filterFuncs = ['swapEgldForToken', 'swapTokenForEgld'];\nconst Trade = () => {\n  return (\n    <div className='container py-4'>\n      <div className='row'>\n        <div className='col-12 col-md-10 mx-auto'>\n          <div className='card shadow-sm rounded border-0'>\n            <div className='card-body p-1'>\n              <div className='card rounded border-0 bg-primary'>\n                <div className='card-body text-center p-4'>\n                  <FormTrade />\n                </div>\n              </div>\n              <Transactions\n                title='Transactions related to trading and your account'\n                filterFuncs={filterFuncs}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Trade;\n","import { dAppName } from 'config';\nimport withPageTitle from './components/PageTitle';\nimport Claim from './pages/Claim';\nimport Fund from './pages/Fund';\nimport Home from './pages/Home';\nimport Trade from './pages/Trade';\n\nexport const routeNames = {\n  home: '/',\n  unlock: '/unlock',\n  ledger: '/ledger',\n  walletconnect: '/walletconnect',\n  fund: '/fund',\n  claim: '/claim',\n  trade: '/trade'\n};\n\nconst routes: Array<any> = [\n  {\n    path: routeNames.home,\n    title: 'Home',\n    component: Home\n  },\n  {\n    path: routeNames.fund,\n    title: 'Fund',\n    component: Fund,\n    authenticatedRoute: true\n  },\n  {\n    path: routeNames.claim,\n    title: 'Claim',\n    component: Claim,\n    authenticatedRoute: true\n  },\n  {\n    path: routeNames.trade,\n    title: 'Trade',\n    component: Trade,\n    authenticatedRoute: true\n  }\n];\n\nconst mappedRoutes = routes.map((route) => {\n  const title = route.title\n    ? `${route.title} • Elrond ${dAppName}`\n    : `Elrond ${dAppName}`;\n\n  const requiresAuth = Boolean(route.authenticatedRoute);\n  const wrappedComponent = withPageTitle(title, route.component);\n\n  return {\n    path: route.path,\n    component: wrappedComponent,\n    authenticatedRoute: requiresAuth\n  };\n});\n\nexport default mappedRoutes;\n","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgElrond(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"327px\",\n    height: \"98px\",\n    viewBox: \"0 0 327 98\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"elrond\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Page-1\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"elrond\",\n    fill: \"#000000\",\n    fillRule: \"nonzero\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M78.2,19.5 C77.8,19.1 77.6,18.7 77.6,18.2 C77.6,17.7 77.8,17.3 78.2,16.9 C79,16.2 80.2,16.2 81,16.9 C81.4,17.3 81.6,17.7 81.6,18.2 C81.6,18.7 81.4,19.1 81,19.5 C80.6,19.8 80.1,20 79.6,20 C79.1,20.1 78.6,19.9 78.2,19.5\",\n    id: \"Path_3_\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M73.3,24.7 C73,24.3 72.8,23.9 72.8,23.4 C72.8,22.9 73,22.5 73.3,22.1 C74,21.4 75.2,21.4 75.9,22.1 C76.2,22.5 76.4,22.9 76.4,23.4 C76.4,23.9 76.2,24.3 75.9,24.7 C75.5,25 75.1,25.2 74.6,25.2 C74.1,25.2 73.7,25 73.3,24.7\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M68,29.8 C67.7,29.5 67.5,29 67.5,28.5 C67.5,28 67.7,27.6 68,27.2 C68.7,26.5 69.9,26.5 70.6,27.2 C70.9,27.5 71.1,28 71.1,28.5 C71.1,29 70.9,29.4 70.6,29.8 C70.2,30.2 69.8,30.3 69.3,30.3 C68.8,30.3 68.3,30.1 68,29.8\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M62.9,34.9 C62.5,34.6 62.3,34.1 62.3,33.6 C62.3,33.1 62.5,32.7 62.9,32.3 C63.7,31.6 64.9,31.6 65.7,32.3 C66.1,32.6 66.3,33.1 66.3,33.6 C66.3,34.1 66.1,34.6 65.7,34.9 C65.3,35.3 64.8,35.4 64.3,35.4 C63.8,35.4 63.3,35.3 62.9,34.9\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M58,40 C57.6,39.7 57.5,39.2 57.5,38.7 C57.5,38.2 57.7,37.8 58,37.4 C58.7,36.7 59.9,36.7 60.6,37.4 C61,37.7 61.1,38.2 61.1,38.7 C61.1,39.2 60.9,39.7 60.6,40 C60.3,40.4 59.8,40.5 59.3,40.5 C58.8,40.6 58.3,40.4 58,40\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M52.1,43.8 C52.1,43.3 52.3,42.9 52.6,42.5 C53.3,41.8 54.5,41.8 55.2,42.5 C55.6,42.9 55.7,43.3 55.7,43.8 C55.7,44.3 55.5,44.7 55.2,45.1 C54.9,45.4 54.4,45.6 53.9,45.6 C53.4,45.6 53,45.4 52.6,45.1 C52.3,44.8 52.1,44.3 52.1,43.8 Z\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M42.6,55.1 C42.3,54.8 42.1,54.3 42.1,53.8 C42.1,53.3 42.3,52.9 42.6,52.5 C43.3,51.8 44.5,51.8 45.2,52.5 C45.6,52.9 45.7,53.3 45.7,53.8 C45.7,54.3 45.5,54.7 45.2,55.1 C44.9,55.5 44.4,55.6 43.9,55.6 C43.4,55.7 43,55.5 42.6,55.1\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.3,60.2 C36.9,59.9 36.7,59.4 36.7,58.9 C36.7,58.4 36.9,58 37.3,57.6 C38.1,56.9 39.3,56.9 40.1,57.6 C40.5,58 40.7,58.4 40.7,58.9 C40.7,59.4 40.5,59.8 40.1,60.2 C39.7,60.6 39.2,60.7 38.7,60.7 C38.2,60.8 37.7,60.6 37.3,60.2\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M32.4,65.4 C32.1,65.1 31.9,64.6 31.9,64.1 C31.9,63.6 32.1,63.1 32.4,62.8 C33.1,62.1 34.3,62.1 35,62.8 C35.3,63.1 35.5,63.6 35.5,64.1 C35.5,64.6 35.3,65 35,65.4 C34.6,65.8 34.2,65.9 33.7,65.9 C33.2,65.9 32.8,65.7 32.4,65.4\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M27.3,70.5 C26.9,70.2 26.8,69.7 26.8,69.2 C26.8,68.7 27,68.3 27.3,67.9 C28,67.2 29.2,67.2 29.9,67.9 C30.2,68.3 30.4,68.7 30.4,69.2 C30.4,69.7 30.2,70.2 29.9,70.5 C29.5,70.9 29.1,71 28.6,71 C28.1,71 27.6,70.9 27.3,70.5\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M22,75.6 C21.6,75.3 21.4,74.8 21.4,74.3 C21.4,73.8 21.6,73.4 22,73 C22.8,72.3 24,72.3 24.7,73 C25.1,73.4 25.3,73.8 25.3,74.3 C25.3,74.8 25.1,75.3 24.7,75.6 C24.3,75.9 23.8,76.1 23.3,76.1 C22.8,76.1 22.3,76 22,75.6\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17,80.7 C16.6,80.3 16.5,79.9 16.5,79.4 C16.5,78.9 16.7,78.5 17,78.1 C17.7,77.4 18.9,77.4 19.6,78.1 C20,78.5 20.1,78.9 20.1,79.4 C20.1,79.9 19.9,80.3 19.6,80.7 C19.3,81 18.8,81.2 18.3,81.2 C17.9,81.3 17.4,81.1 17,80.7\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.6,19.5 C19.9,19.1 20.1,18.7 20.1,18.2 C20.1,17.7 19.9,17.3 19.6,16.9 C18.9,16.2 17.7,16.2 17,16.9 C16.6,17.3 16.5,17.7 16.5,18.2 C16.5,18.7 16.7,19.1 17,19.5 C17.3,19.8 17.8,20 18.3,20 C18.8,20.1 19.3,19.9 19.6,19.5\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M24.7,24.7 C25.1,24.3 25.3,23.9 25.3,23.4 C25.3,22.9 25.1,22.5 24.7,22.1 C23.9,21.4 22.7,21.4 21.9,22.1 C21.5,22.5 21.3,22.9 21.3,23.4 C21.3,23.9 21.5,24.3 21.9,24.7 C22.3,25 22.8,25.2 23.3,25.2 C23.8,25.2 24.3,25 24.7,24.7\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M29.9,29.8 C30.2,29.5 30.4,29 30.4,28.5 C30.4,28 30.2,27.6 29.9,27.2 C29.2,26.5 28,26.5 27.3,27.2 C27,27.5 26.8,28 26.8,28.5 C26.8,29 27,29.4 27.3,29.8 C27.7,30.2 28.1,30.3 28.6,30.3 C29,30.3 29.5,30.1 29.9,29.8\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M35,34.9 C35.3,34.6 35.5,34.1 35.5,33.6 C35.5,33.1 35.3,32.7 35,32.3 C34.3,31.6 33.1,31.6 32.4,32.3 C32.1,32.6 31.9,33.1 31.9,33.6 C31.9,34.1 32.1,34.6 32.4,34.9 C32.8,35.3 33.2,35.4 33.7,35.4 C34.1,35.4 34.6,35.3 35,34.9\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40,40 C40.4,39.7 40.6,39.2 40.6,38.7 C40.6,38.2 40.4,37.8 40,37.4 C39.3,36.7 38,36.7 37.3,37.4 C36.9,37.7 36.7,38.2 36.7,38.7 C36.7,39.2 36.9,39.7 37.3,40 C37.7,40.4 38.2,40.5 38.7,40.5 C39.2,40.6 39.7,40.4 40,40\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.7,43.8 C45.7,43.3 45.5,42.9 45.2,42.5 C44.5,41.8 43.3,41.8 42.6,42.5 C42.2,42.9 42.1,43.3 42.1,43.8 C42.1,44.3 42.3,44.7 42.6,45.1 C42.9,45.4 43.4,45.6 43.9,45.6 C44.4,45.6 44.8,45.4 45.2,45.1 C45.6,44.8 45.7,44.3 45.7,43.8 Z\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M50.3,50.3 C50.7,49.9 50.8,49.5 50.8,49 C50.8,48.5 50.6,48.1 50.3,47.7 C49.6,47 48.4,47 47.7,47.7 C47.3,48.1 47.2,48.5 47.2,49 C47.2,49.5 47.4,49.9 47.7,50.3 C48,50.6 48.5,50.8 49,50.8 C49.5,50.8 50,50.6 50.3,50.3\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M55.4,55.1 C55.8,54.8 56,54.3 56,53.8 C56,53.3 55.8,52.9 55.4,52.5 C54.6,51.8 53.4,51.8 52.7,52.5 C52.3,52.9 52.1,53.3 52.1,53.8 C52.1,54.3 52.3,54.7 52.7,55.1 C53.1,55.5 53.6,55.6 54.1,55.6 C54.5,55.7 55,55.5 55.4,55.1\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M60.6,60.2 C60.9,59.9 61.1,59.4 61.1,58.9 C61.1,58.4 60.9,58 60.6,57.6 C59.9,56.9 58.7,56.9 58,57.6 C57.7,58 57.5,58.4 57.5,58.9 C57.5,59.4 57.7,59.8 58,60.2 C58.4,60.6 58.8,60.7 59.3,60.7 C59.7,60.8 60.2,60.6 60.6,60.2\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M65.7,65.4 C66,65.1 66.2,64.6 66.2,64.1 C66.2,63.6 66,63.1 65.7,62.8 C65,62.1 63.8,62.1 63.1,62.8 C62.8,63.1 62.6,63.6 62.6,64.1 C62.6,64.6 62.8,65 63.1,65.4 C63.5,65.8 63.9,65.9 64.4,65.9 C64.9,65.9 65.3,65.7 65.7,65.4\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M70.5,70.5 C70.9,70.2 71,69.7 71,69.2 C71,68.7 70.8,68.3 70.5,67.9 C69.8,67.2 68.6,67.2 67.9,67.9 C67.6,68.3 67.4,68.7 67.4,69.2 C67.4,69.7 67.6,70.2 67.9,70.5 C68.3,70.9 68.7,71 69.2,71 C69.7,71 70.2,70.9 70.5,70.5\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M75.9,75.6 C76.3,75.3 76.4,74.8 76.4,74.3 C76.4,73.8 76.2,73.4 75.9,73 C75.2,72.3 74,72.3 73.3,73 C72.9,73.4 72.8,73.8 72.8,74.3 C72.8,74.8 73,75.3 73.3,75.6 C73.6,75.9 74.1,76.1 74.6,76.1 C75.1,76.1 75.6,76 75.9,75.6\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M81,80.7 C81.4,80.3 81.6,79.9 81.6,79.4 C81.6,78.9 81.4,78.5 81,78.1 C80.2,77.4 79,77.4 78.3,78.1 C77.9,78.5 77.7,78.9 77.7,79.4 C77.7,79.9 77.9,80.3 78.3,80.7 C78.7,81 79.2,81.2 79.7,81.2 C80.1,81.3 80.6,81.1 81,80.7\",\n    id: \"Path\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M31.7,20.9 C36.9,17.5 42.6,15.9 48.9,15.8 C55.1,15.8 60.8,17.5 66.1,20.9 L77.1,9.9 C68.5,3.4 59.2,0.1 48.9,0.1 C38.6,0.1 29.2,3.4 20.8,9.9 L31.7,20.9 Z\",\n    id: \"Fill-9_1_\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.7,66 C17.2,60.7 15.5,55 15.5,48.9 C15.5,42.7 17.2,37 20.7,31.8 L9.8,20.9 C3.4,29.3 0.2,38.6 0.2,49 C0.2,59.2 3.4,68.6 9.9,77.1 L20.7,66 Z\",\n    id: \"Fill-10_1_\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M66.1,76.9 C60.9,80.4 55.2,82.2 49,82.3 C42.7,82.3 36.9,80.6 31.7,77 L20.7,87.9 C29.2,94.5 38.6,97.8 49,97.7 C59.3,97.6 68.6,94.3 77,87.9 L66.1,76.9 Z\",\n    id: \"Fill-11_1_\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M76.8,31.7 C80.3,37 82.1,42.8 82,49.1 C81.9,55.2 80.2,60.8 76.8,65.9 L87.8,76.8 C94.3,68.4 97.6,59.1 97.6,48.9 C97.7,38.5 94.4,29.1 87.8,20.6 L76.8,31.7 Z\",\n    id: \"Fill-12_1_\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M88.3,80.3 C92.5,80.3 96,83.7 96,88 C96,92.2 92.6,95.7 88.3,95.7 C84.1,95.7 80.6,92.3 80.6,88 C80.6,83.7 84,80.3 88.3,80.3\",\n    id: \"Fill-15_1_\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.7,80.3 C13.9,80.3 17.3,83.7 17.3,88 C17.3,92.2 13.9,95.7 9.7,95.7 C5.5,95.7 2.1,92.3 2.1,88 C2.1,83.7 5.5,80.3 9.7,80.3\",\n    id: \"Fill-16_1_\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M88.4,1.8 C92.6,1.8 96,5.2 96,9.5 C96,13.8 92.6,17.2 88.4,17.2 C84.2,17.2 80.8,13.8 80.8,9.5 C80.8,5.2 84.2,1.8 88.4,1.8\",\n    id: \"Fill-17_1_\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.6,1.8 C13.8,1.8 17.3,5.2 17.3,9.4 C17.3,13.6 13.9,17 9.6,17 C5.4,17 1.9,13.6 1.9,9.4 C1.9,5.2 5.3,1.8 9.6,1.8\",\n    id: \"Fill-18_1_\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M154.5,63.4 L150.7,60 C148.4,62.7 143.8,64.3 139.9,64.3 C133.4,64.3 128.2,60.4 127.6,54.1 L156.4,54.1 C157.7,40.6 149.8,34.2 139.4,34.2 C129.2,34.2 121.8,41.5 121.8,51.8 C121.8,62.6 129.1,69.5 139.7,69.5 C145.1,69.4 151,67.4 154.5,63.4 L154.5,63.4 Z M151.2,49.3 L127.7,49.3 C128.7,42.8 133.8,39.2 139.7,39.2 C146.3,39.2 150.8,42.7 151.2,49.1 L151.2,49.3 L151.2,49.3 Z M170.4,20.7 L164.8,20.7 L164.8,68.8 L170.4,68.8 L170.4,20.7 Z M186.3,34.9 L181.1,34.9 L181.1,68.8 L186.7,68.8 L186.7,49.9 C186.7,43.7 191.2,39.8 196.7,39.7 C199,39.7 200.8,40.3 202.6,41.6 L205.1,36.8 C203,35.2 200.2,34.2 197.2,34.3 C193.3,34.3 189.1,35.5 186.8,39.9 L186.3,34.9 L186.3,34.9 Z M208.3,51.9 C208.3,62.2 215.7,69.4 225.9,69.4 C236.1,69.4 243.5,62.2 243.5,51.9 C243.5,41.4 236.2,34.1 225.9,34.1 C215.8,34.1 208.3,41.4 208.3,51.9 Z M237.9,51.9 C237.8,59 232.8,64.1 225.8,64.1 C218.9,64.1 213.9,59 213.9,51.9 C213.9,44.3 219,39.3 225.9,39.3 C232.7,39.3 237.9,44.4 237.9,51.9 Z M251.6,34.8 L251.6,68.8 L257.2,68.8 L257.2,50.6 C257.2,44.5 261.5,39.6 267.6,39.5 C274.1,39.5 277.9,43.6 277.9,50.1 L277.9,68.8 L283.5,68.8 L283.5,50.1 C283.5,40.1 277.2,34.4 268.6,34.4 C264.1,34.4 259.9,36.3 257,40.3 L256.7,34.9 L251.6,34.8 L251.6,34.8 Z M326.6,20.7 L321,20.7 L321,41 C318.6,36.4 313.1,34.2 308.3,34.2 C298.7,34.2 291.2,40.4 291.2,51.8 C291.2,63 298.7,69.4 308.4,69.4 C313.4,69.4 318.4,67.2 321.1,62.5 L321.4,68.7 L326.7,68.7 L326.6,20.7 L326.6,20.7 Z M308.8,39.5 C315.5,39.5 320.8,44.5 320.8,51.7 C320.8,59.1 315.5,64.1 308.8,64.1 C302.2,64.1 296.9,59.6 296.9,51.8 C296.9,43.9 302.1,39.6 308.6,39.5 L308.8,39.5 L308.8,39.5 Z\",\n    id: \"elrond_3_\"\n  })))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgElrond);\nexport default __webpack_public_path__ + \"static/media/elrond.d914d58e.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport { useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { contractAddress } from 'config';\nimport { ReactComponent as HeartIcon } from '../../../assets/img/heart.svg';\n\nconst Footer = () => {\n  const { address } = useGetAccountInfo();\n  return (\n    <footer className='bg-white mt-2 mb-2 text-center border-top'>\n      <div className='row p-0 m-0'>\n        <div className='col p-0'>\n          <span className='opacity-6 mr-1'>Your address: </span>\n          <span data-testid='accountAddress'>{address}</span>\n        </div>\n      </div>\n      <div className='row p-0 m-0'>\n        <div className='col p-0 m-0'>\n          <span className='opacity-6 mr-1'>Contract address: </span>\n          <span data-testid='contractAddress'>{contractAddress}</span>\n        </div>\n      </div>\n      <div className='row p-0 m-0'>\n        <div className='col p-0 m-0'>\n          <a\n            {...{\n              target: '_blank'\n            }}\n            className='align-items-center'\n            href='https://elrond.com/'\n          >\n            Made by Sergi thanks to the\n            <HeartIcon className='mx-1' />\n            of the Elrond Team.\n          </a>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { logout, useGetAccountInfo } from '@elrondnetwork/dapp-core';\nimport { Navbar as BsNavbar, NavItem, Nav } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { dAppName, environment } from 'config';\nimport { routeNames } from 'routes';\nimport { ReactComponent as ElrondLogo } from './../../../assets/img/elrond.svg';\n\ninterface NavBarProps {\n  current: string;\n  isOwner: boolean;\n}\n\nconst Navbar = (props: NavBarProps) => {\n  const { address } = useGetAccountInfo();\n  const { current, isOwner } = props;\n\n  const handleClick = (event: any) => {\n    const option = event.target.innerText.toLowerCase();\n    window.location.href = `${window.location.origin}/${option}`;\n    // you are required to autenticate again\n    // logout(`${window.location.origin}/${option}`);\n  };\n\n  const handleLogout = () => {\n    logout(`${window.location.origin}`);\n  };\n\n  const isLoggedIn = Boolean(address);\n\n  return (\n    <BsNavbar className='bg-white border-bottom px-4 py-3'>\n      <div className='container-fluid'>\n        <Link\n          className='d-flex align-items-center navbar-brand mr-0'\n          to={isLoggedIn ? routeNames.trade : routeNames.home}\n        >\n          <ElrondLogo className='elrond-logo' />\n          <span className='dapp-name text-muted'>\n            {dAppName} - {environment}\n          </span>\n        </Link>\n\n        <Nav className='ml-auto'>\n          {isLoggedIn && (\n            <NavItem>\n              <button\n                className={\n                  current == 'Claim'\n                    ? 'btn btn-link bg-secondary'\n                    : 'btn btn-link'\n                }\n                onClick={handleClick}\n                disabled={!isOwner}\n              >\n                Claim\n              </button>\n            </NavItem>\n          )}\n          {isLoggedIn && (\n            <NavItem>\n              <button\n                className={\n                  current == 'Fund'\n                    ? 'btn btn-link bg-secondary'\n                    : 'btn btn-link'\n                }\n                onClick={handleClick}\n                disabled={!isOwner}\n              >\n                Fund\n              </button>\n            </NavItem>\n          )}\n          {isLoggedIn && (\n            <NavItem>\n              <button\n                className={\n                  current == 'Trade'\n                    ? 'btn btn-link bg-secondary'\n                    : 'btn btn-link'\n                }\n                onClick={handleClick}\n              >\n                Trade\n              </button>\n            </NavItem>\n          )}\n          {isLoggedIn && (\n            <NavItem>\n              <button className='btn btn-link' onClick={handleLogout}>\n                Close\n              </button>\n            </NavItem>\n          )}\n        </Nav>\n      </div>\n    </BsNavbar>\n  );\n};\n\nexport default Navbar;\n","import React from 'react';\nimport {\n  AuthenticatedRoutesWrapper,\n  useGetAccountInfo\n} from '@elrondnetwork/dapp-core';\nimport { useLocation } from 'react-router-dom';\nimport { contractAddress } from 'config';\nimport routes, { routeNames } from 'routes';\nimport { capitalize } from '../../controllers/common';\nimport { getProvider } from '../../controllers/myTransactions';\nimport Footer from './Footer';\nimport Navbar from './Navbar';\n\nconst Layout = ({ children }: { children: React.ReactNode }) => {\n  const { pathname, search } = useLocation();\n  const menuOpt = pathname.split('/')[1];\n  const [isOwner, setIsOwner] = React.useState(false);\n  const { address } = useGetAccountInfo();\n  const provider = getProvider();\n\n  provider.isOwnerSC(contractAddress, address).then((answer) => {\n    setIsOwner(answer);\n  });\n\n  return (\n    <div className='bg-light d-flex flex-column flex-fill wrapper'>\n      <Navbar current={capitalize(menuOpt)} isOwner={isOwner} />\n      <main className='d-flex flex-column flex-grow-1'>\n        <AuthenticatedRoutesWrapper\n          routes={routes}\n          unlockRoute={`${routeNames.unlock}${search}`}\n        >\n          {children}\n        </AuthenticatedRoutesWrapper>\n      </main>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Layout;\n","import * as React from 'react';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useLocation } from 'react-router-dom';\n\nconst PageNotFound = () => {\n  const { pathname } = useLocation();\n  return (\n    <div className='d-flex flex-fill align-items-center container'>\n      <div className='row w-100'>\n        <div className='col-12 col-md-8 col-lg-5 mx-auto'>\n          <div className='card shadow-sm rounded p-4 border-0'>\n            <div className='card-body text-center d-flex flex-column justify-content-center'>\n              <div className='dapp-icon icon-medium'>\n                <FontAwesomeIcon\n                  icon={faSearch}\n                  className='mx-auto text-muted fa-3x mb-2'\n                />\n              </div>\n              <span className='h4 empty-heading mt-3'>Page not found</span>\n              <span className='empty-details'>{pathname}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PageNotFound;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  DappUI,\n  DappProvider\n  // useGetTransactionDisplayInfo,\n  // useGetSignedTransactions\n} from '@elrondnetwork/dapp-core';\nimport { Route, Routes, BrowserRouter as Router } from 'react-router-dom';\nimport Layout from 'components/Layout';\nimport { environment } from 'config';\nimport PageNotFound from 'pages/PageNotFound';\nimport { routeNames } from 'routes';\nimport routes from 'routes';\n\n// updating to @elrondnetwork/dapp-core@1.1.21 css is lost\n// import '@elrondnetwork/dapp-core/build/index.css';\n// I copied that file to dapp-core.css\nimport './dapp-core.css';\n\nconst {\n  TransactionsToastList,\n  SignTransactionsModals,\n  NotificationModal,\n  DappCorePages: { UnlockPage }\n} = DappUI;\nconst referrer = document.referrer;\nconst mainroute = '/' + referrer.split('/').pop();\nconst defaultRoute = '/Trade';\n\nconst App = () => {\n  return (\n    <Router>\n      <DappProvider\n        environment={environment}\n        customNetworkConfig={{ name: 'customConfig', apiTimeout: 6000 }}\n      >\n        <Layout>\n          <TransactionsToastList />\n          <NotificationModal />\n          <SignTransactionsModals className='custom-class-for-modals' />\n          <Routes>\n            <Route\n              path={routeNames.unlock}\n              element={\n                <UnlockPage\n                  loginRoute={mainroute !== '/' ? mainroute : defaultRoute}\n                />\n              }\n            />\n            {routes.map((route: any, index: number) => (\n              <Route\n                path={route.path}\n                key={'route-key-' + index}\n                element={<route.component />}\n              />\n            ))}\n            <Route path='*' element={<PageNotFound />} />\n          </Routes>\n        </Layout>\n      </DappProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/sass/theme.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}